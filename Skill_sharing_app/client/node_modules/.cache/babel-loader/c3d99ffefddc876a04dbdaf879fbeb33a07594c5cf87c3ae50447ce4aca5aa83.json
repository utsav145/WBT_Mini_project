{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Clear token and redirect to login if unauthorized\n    localStorage.removeItem('token');\n    localStorage.removeItem('userProfile');\n    window.location.href = '/login';\n  }\n  return Promise.reject(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error);\n});\n\n// Profile API calls\nexport const profileApi = {\n  // Get all profiles\n  getAllProfiles: async () => {\n    try {\n      const response = await api.get('/profiles');\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Error fetching profiles:', error);\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to fetch profiles');\n    }\n  },\n  // Get single profile\n  getProfile: async userId => {\n    try {\n      const response = await api.get(`/profiles/${userId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error('Error fetching profile:', error);\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to fetch profile');\n    }\n  },\n  // Create profile\n  createProfile: async profileData => {\n    try {\n      const response = await api.post('/profiles', profileData);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      console.error('Error creating profile:', error);\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to create profile');\n    }\n  },\n  // Update profile\n  updateProfile: async (userId, profileData) => {\n    try {\n      const response = await api.put(`/profiles/${userId}`, profileData);\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      console.error('Error updating profile:', error);\n      throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to update profile');\n    }\n  },\n  // Delete profile\n  deleteProfile: async id => {\n    const response = await api.delete(`/profiles/${id}`);\n    if (!response.ok) throw new Error('Failed to delete profile');\n    return response.data;\n  }\n};\n\n// Auth API calls\nexport const authApi = {\n  // Register\n  register: async userData => {\n    try {\n      const response = await api.post('/auth/register', userData);\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      console.error('Registration error:', error);\n      throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to register');\n    }\n  },\n  // Login\n  login: async credentials => {\n    try {\n      console.log('Attempting login with:', credentials);\n      const response = await api.post('/auth/login', credentials);\n      console.log('Login response:', response.data);\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      console.error('Login error:', error);\n      throw new Error(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to login');\n    }\n  },\n  // Get current user\n  getCurrentUser: async () => {\n    try {\n      const response = await api.get('/auth/me');\n      return response.data;\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      console.error('Get current user error:', error);\n      throw new Error(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || 'Failed to get current user');\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userProfile');\n  }\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response2","status","removeItem","window","location","href","data","profileApi","getAllProfiles","get","_error$response3","_error$response3$data","console","Error","message","getProfile","userId","_error$response4","_error$response4$data","createProfile","profileData","post","_error$response5","_error$response5$data","updateProfile","put","_error$response6","_error$response6$data","deleteProfile","id","delete","ok","authApi","register","userData","setItem","_error$response7","_error$response7$data","login","credentials","log","_error$response8","_error$response8$data","getCurrentUser","_error$response9","_error$response9$data","logout"],"sources":["C:/Users/avgav/Downloads/DBT Kit for CDAC Mumbai/DBT Kit for CDAC Mumbai/MySQL - SQL - Assignments/Skill_sharing_app/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor to handle errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Clear token and redirect to login if unauthorized\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('userProfile');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error.response?.data || error);\r\n  }\r\n);\r\n\r\n// Profile API calls\r\nexport const profileApi = {\r\n  // Get all profiles\r\n  getAllProfiles: async () => {\r\n    try {\r\n      const response = await api.get('/profiles');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching profiles:', error);\r\n      throw new Error(error.response?.data?.message || 'Failed to fetch profiles');\r\n    }\r\n  },\r\n\r\n  // Get single profile\r\n  getProfile: async (userId) => {\r\n    try {\r\n      const response = await api.get(`/profiles/${userId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching profile:', error);\r\n      throw new Error(error.response?.data?.message || 'Failed to fetch profile');\r\n    }\r\n  },\r\n\r\n  // Create profile\r\n  createProfile: async (profileData) => {\r\n    try {\r\n      const response = await api.post('/profiles', profileData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating profile:', error);\r\n      throw new Error(error.response?.data?.message || 'Failed to create profile');\r\n    }\r\n  },\r\n\r\n  // Update profile\r\n  updateProfile: async (userId, profileData) => {\r\n    try {\r\n      const response = await api.put(`/profiles/${userId}`, profileData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating profile:', error);\r\n      throw new Error(error.response?.data?.message || 'Failed to update profile');\r\n    }\r\n  },\r\n\r\n  // Delete profile\r\n  deleteProfile: async (id) => {\r\n    const response = await api.delete(`/profiles/${id}`);\r\n    if (!response.ok) throw new Error('Failed to delete profile');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Auth API calls\r\nexport const authApi = {\r\n  // Register\r\n  register: async (userData) => {\r\n    try {\r\n      const response = await api.post('/auth/register', userData);\r\n      if (response.data.token) {\r\n        localStorage.setItem('token', response.data.token);\r\n      }\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      throw new Error(error.response?.data?.message || 'Failed to register');\r\n    }\r\n  },\r\n\r\n  // Login\r\n  login: async (credentials) => {\r\n    try {\r\n      console.log('Attempting login with:', credentials);\r\n      const response = await api.post('/auth/login', credentials);\r\n      console.log('Login response:', response.data);\r\n      \r\n      if (response.data.token) {\r\n        localStorage.setItem('token', response.data.token);\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw new Error(error.response?.data?.message || 'Failed to login');\r\n    }\r\n  },\r\n\r\n  // Get current user\r\n  getCurrentUser: async () => {\r\n    try {\r\n      const response = await api.get('/auth/me');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get current user error:', error);\r\n      throw new Error(error.response?.data?.message || 'Failed to get current user');\r\n    }\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userProfile');\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}