{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Clear token and redirect to login if unauthorized\n    localStorage.removeItem('token');\n    localStorage.removeItem('userProfile');\n    window.location.href = '/login';\n  }\n  return Promise.reject(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error);\n});\nconst getAuthHeader = () => {\n  const token = localStorage.getItem('token');\n  console.log('Current token:', token); // Debug log\n  return token ? {\n    Authorization: `Bearer ${token}`\n  } : {};\n};\n\n// Profile API calls\nexport const profileApi = {\n  // Get all profiles\n  getAllProfiles: async () => {\n    try {\n      const response = await api.get('/profiles');\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Error fetching profiles:', error);\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to fetch profiles');\n    }\n  },\n  // Get single profile\n  getProfile: async userId => {\n    try {\n      console.log('Making getProfile request for user:', userId); // Debug log\n      const response = await api.get(`/profiles/${userId}`, {\n        headers: getAuthHeader()\n      });\n      console.log('getProfile response:', response.data); // Debug log\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      console.error('getProfile error:', ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message); // Debug log\n      throw error;\n    }\n  },\n  // Create profile\n  createProfile: async profileData => {\n    try {\n      const response = await api.post('/profiles', profileData);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      console.error('Error creating profile:', error);\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to create profile');\n    }\n  },\n  // Update profile\n  updateProfile: async (userId, profileData) => {\n    try {\n      const response = await api.put(`/profiles/${userId}`, profileData);\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      console.error('Error updating profile:', error);\n      throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to update profile');\n    }\n  },\n  // Delete profile\n  deleteProfile: async id => {\n    const response = await api.delete(`/profiles/${id}`);\n    if (!response.ok) throw new Error('Failed to delete profile');\n    return response.data;\n  }\n};\n\n// Auth API calls\nexport const authApi = {\n  // Register\n  register: async userData => {\n    try {\n      const response = await api.post('/auth/register', userData);\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      console.error('Registration error:', error);\n      throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to register');\n    }\n  },\n  // Login\n  login: async credentials => {\n    try {\n      console.log('Attempting login with:', credentials);\n      const response = await api.post('/auth/login', credentials);\n      console.log('Login response:', response.data);\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      console.error('Login error:', error);\n      throw new Error(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to login');\n    }\n  },\n  // Get current user\n  getCurrentUser: async () => {\n    try {\n      const response = await api.get('/auth/me');\n      return response.data;\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      console.error('Get current user error:', error);\n      throw new Error(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || 'Failed to get current user');\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userProfile');\n  }\n};\n\n// Upload image\nexport const uploadImage = async file => {\n  const formData = new FormData();\n  formData.append('image', file);\n  const response = await fetch(`${API_URL}/upload`, {\n    method: 'POST',\n    body: formData,\n    headers: {\n      'Authorization': `Bearer ${localStorage.getItem('token')}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to upload image');\n  }\n  return response.json();\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response2","status","removeItem","window","location","href","data","getAuthHeader","console","log","profileApi","getAllProfiles","get","_error$response3","_error$response3$data","Error","message","getProfile","userId","_error$response4","createProfile","profileData","post","_error$response5","_error$response5$data","updateProfile","put","_error$response6","_error$response6$data","deleteProfile","id","delete","ok","authApi","register","userData","setItem","_error$response7","_error$response7$data","login","credentials","_error$response8","_error$response8$data","getCurrentUser","_error$response9","_error$response9$data","logout","uploadImage","file","formData","FormData","append","fetch","method","body","json"],"sources":["C:/Users/avgav/Downloads/DBT Kit for CDAC Mumbai/DBT Kit for CDAC Mumbai/MySQL - SQL - Assignments/Skill_sharing_app/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Clear token and redirect to login if unauthorized\n      localStorage.removeItem('token');\n      localStorage.removeItem('userProfile');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error.response?.data || error);\n  }\n);\n\nconst getAuthHeader = () => {\n  const token = localStorage.getItem('token');\n  console.log('Current token:', token); // Debug log\n  return token ? { Authorization: `Bearer ${token}` } : {};\n};\n\n// Profile API calls\nexport const profileApi = {\n  // Get all profiles\n  getAllProfiles: async () => {\n    try {\n      const response = await api.get('/profiles');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching profiles:', error);\n      throw new Error(error.response?.data?.message || 'Failed to fetch profiles');\n    }\n  },\n\n  // Get single profile\n  getProfile: async (userId) => {\n    try {\n      console.log('Making getProfile request for user:', userId); // Debug log\n      const response = await api.get(`/profiles/${userId}`, {\n        headers: getAuthHeader()\n      });\n      console.log('getProfile response:', response.data); // Debug log\n      return response.data;\n    } catch (error) {\n      console.error('getProfile error:', error.response?.data || error.message); // Debug log\n      throw error;\n    }\n  },\n\n  // Create profile\n  createProfile: async (profileData) => {\n    try {\n      const response = await api.post('/profiles', profileData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating profile:', error);\n      throw new Error(error.response?.data?.message || 'Failed to create profile');\n    }\n  },\n\n  // Update profile\n  updateProfile: async (userId, profileData) => {\n    try {\n      const response = await api.put(`/profiles/${userId}`, profileData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      throw new Error(error.response?.data?.message || 'Failed to update profile');\n    }\n  },\n\n  // Delete profile\n  deleteProfile: async (id) => {\n    const response = await api.delete(`/profiles/${id}`);\n    if (!response.ok) throw new Error('Failed to delete profile');\n    return response.data;\n  }\n};\n\n// Auth API calls\nexport const authApi = {\n  // Register\n  register: async (userData) => {\n    try {\n      const response = await api.post('/auth/register', userData);\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw new Error(error.response?.data?.message || 'Failed to register');\n    }\n  },\n\n  // Login\n  login: async (credentials) => {\n    try {\n      console.log('Attempting login with:', credentials);\n      const response = await api.post('/auth/login', credentials);\n      console.log('Login response:', response.data);\n      \n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n      }\n      \n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw new Error(error.response?.data?.message || 'Failed to login');\n    }\n  },\n\n  // Get current user\n  getCurrentUser: async () => {\n    try {\n      const response = await api.get('/auth/me');\n      return response.data;\n    } catch (error) {\n      console.error('Get current user error:', error);\n      throw new Error(error.response?.data?.message || 'Failed to get current user');\n    }\n  },\n\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userProfile');\n  }\n};\n\n// Upload image\nexport const uploadImage = async (file) => {\n  const formData = new FormData();\n  formData.append('image', file);\n\n  const response = await fetch(`${API_URL}/upload`, {\n    method: 'POST',\n    body: formData,\n    headers: {\n      'Authorization': `Bearer ${localStorage.getItem('token')}`\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to upload image');\n  }\n\n  return response.json();\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}